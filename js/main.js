const Game = {
    // –°—Ç–∞–Ω –≥—Ä–∏
    state: {
        money: 1000,
        wood: 0,
        coalDust: 0,
        coal: 0,
        goldenCoal: 0,
        woodcutters: 0,
        carbonizationLevel: 1,
        experience: 0,
        level: 1,
        unlockedMethods: [1],
        lastUpdate: Date.now()
    },

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä—ñ–≤–Ω—ñ–≤
    levelConfig: {
        expPerLevel: 1000,    // –ë–∞–∑–æ–≤–∏–π –¥–æ—Å–≤—ñ–¥ –¥–ª—è —Ä—ñ–≤–Ω—è
        multiplier: 1.5,      // –ú–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
        rewards: {
            2: { money: 1000, description: "–ë–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞" },
            3: { money: 2500, description: "–î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –≤—É–≥–ª—è—Ä" },
            4: { money: 5000, description: "–ú–∞–π—Å—Ç–µ—Ä –≤—É–≥—ñ–ª–ª—è" },
            5: { money: 10000, description: "–ï–∫—Å–ø–µ—Ä—Ç –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞" }
        }
    },

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏
    init() {
        console.log('–ì—Ä–∞ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...');
        const savedState = SaveSystem.loadGame();
        if (savedState) {
            this.state = savedState;
            console.log('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É –≥—Ä—É');
        }
        this.startGameLoop();
        this.updateUI();
    },

    // –Ü–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª
    startGameLoop() {
        setInterval(() => {
            const now = Date.now();
            const delta = (now - this.state.lastUpdate) / 1000;

            // –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –¥–µ—Ä–µ–≤–∏–Ω–∏
            if (this.state.woodcutters > 0) {
                const production = WoodcuttingSystem.produce() * delta;
                this.state.wood += production;
            }

            this.state.lastUpdate = now;
            this.updateUI();
            SaveSystem.saveGame(this.state);
        }, 1000);
    },

    // –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–∞–∂—É
    sellWood() {
        if (this.state.wood >= 1) {
            this.state.wood--;
            this.state.money += 10;
            this.addExperience(1);
            UISystem.showMessage("+10 üí∞");
            this.updateUI();
        }
    },

    sellCoalDust() {
        if (this.state.coalDust >= 1) {
            this.state.coalDust--;
            this.state.money += 50;
            this.addExperience(5);
            UISystem.showMessage("+50 üí∞");
            this.updateUI();
        }
    },

    sellCoal() {
        if (this.state.coal >= 1) {
            this.state.coal--;
            this.state.money += 150;
            this.addExperience(15);
            UISystem.showMessage("+150 üí∞");
            this.updateUI();
        }
    },

    sellGoldenCoal() {
        if (this.state.goldenCoal >= 1) {
            this.state.goldenCoal--;
            this.state.money += 300;
            this.addExperience(30);
            UISystem.showMessage("+300 üí∞");
            this.updateUI();
        }
    },

    // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å–≤—ñ–¥—É
    addExperience(amount) {
        this.state.experience += amount;
        const expNeeded = this.calculateExpForNextLevel();
        
        if (this.state.experience >= expNeeded) {
            this.levelUp();
        }
        
        this.updateUI();
    },

    levelUp() {
        this.state.level++;
        const reward = this.levelConfig.rewards[this.state.level];
        
        if (reward) {
            this.state.money += reward.money;
            UISystem.showMessage(
                `–†—ñ–≤–µ–Ω—å ${this.state.level}! ${reward.description} +${reward.money}üí∞`,
                "success"
            );
        }
    },

    calculateExpForNextLevel() {
        return Math.floor(
            this.levelConfig.expPerLevel * 
            Math.pow(this.levelConfig.multiplier, this.state.level - 1)
        );
    },

    // –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ
    startProduction(method) {
        const production = ProductionSystem.startProduction(method);
        if (production.success) {
            // –ü–æ—á–∞—Ç–æ–∫ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
            const expGain = production.capacity * 10;
            this.addExperience(expGain);
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å–±–∞—Ä—É
            UISystem.updateProductionProgress(
                production.timeMs,
                () => this.finishProduction(method)
            );
        } else {
            UISystem.showMessage(production.message, "error");
        }
    },

    finishProduction(method) {
        const results = ProductionSystem.finishProduction(method);
        
        this.state.coalDust += results.coalDust;
        this.state.coal += results.coal;
        this.state.goldenCoal += results.goldenCoal;
        
        UISystem.showMessage(
            `–í–∏—Ä–æ–±–ª–µ–Ω–æ: ${results.coalDust}üí® ${results.coal}‚ö´ ${results.goldenCoal}‚ú®`
        );
        
        this.updateUI();
    },

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    updateUI() {
        const resources = {
            'money': Math.floor(this.state.money),
            'wood': Math.floor(this.state.wood),
            'coalDust': Math.floor(this.state.coalDust),
            'coal': Math.floor(this.state.coal),
            'goldenCoal': Math.floor(this.state.goldenCoal)
        };

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
        for (const [id, value] of Object.entries(resources)) {
            document.getElementById(id).textContent = value;
        }

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É
        const expNeeded = this.calculateExpForNextLevel();
        document.getElementById('experience').textContent = 
            `${Math.floor(this.state.experience)}/${expNeeded}`;
        document.getElementById('level').textContent = this.state.level;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å–±–∞—Ä—É –¥–æ—Å–≤—ñ–¥—É
        const expPercentage = (this.state.experience / expNeeded) * 100;
        document.querySelector('.exp-fill').style.width = `${expPercentage}%`;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –º–µ—Ç–æ–¥—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
        this.updateMethodButtons();
    },

    updateMethodButtons() {
        const methods = [
            { id: 'method2', cost: 5000 },
            { id: 'method3', cost: 25000 },
            { id: 'method4', cost: 100000 }
        ];

        methods.forEach(method => {
            const button = document.getElementById(method.id);
            if (button) {
                button.disabled = this.state.money < method.cost;
            }
        });
    }
};

// –ó–∞–ø—É—Å–∫ –≥—Ä–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    Game.init();
});
```

–•–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ñ–∞–π–ª (production.js)? 5. **js/utils/save.js**:
```javascript
// –°–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
const SaveSystem = {
    // –ö–ª—é—á –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
    storageKey: 'charcoal_game_save',

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∏
    saveGame(state) {
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            const saveData = {
                version: 1,
                timestamp: Date.now(),
                state: {
                    money: Math.floor(state.money),
                    wood: Math.floor(state.wood),
                    coal: Math.floor(state.coal),
                    woodcutters: state.woodcutters,
                    carbonizationLevel: state.carbonizationLevel,
                    lastUpdate: Date.now()
                }
            };

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
            localStorage.setItem(this.storageKey, JSON.stringify(saveData));
            console.log('–ì—Ä—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
            return true;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
            return false;
        }
    },

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –≥—Ä–∏
    loadGame() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
            const savedData = localStorage.getItem(this.storageKey);
            if (!savedData) {
                console.log('–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return null;
            }

            // –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ
            const data = JSON.parse(savedData);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            if (data.version !== 1) {
                console.log('–ù–µ—Å—É–º—ñ—Å–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
                return null;
            }

            console.log('–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            return data.state;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
            return null;
        }
    },

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    deleteSave() {
        try {
            localStorage.removeItem(this.storageKey);
            console.log('–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ');
            return true;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
            return false;
        }
    },

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    hasSave() {
        return localStorage.getItem(this.storageKey) !== null;
    }
};
