const Game = {
    // –°—Ç–∞–Ω –≥—Ä–∏
    state: {
        money: 1000,
        wood: 0,
        coalDust: 0,
        coal: 0,
        goldenCoal: 0,
        woodcutters: 0,
        experience: 0,
        level: 1,
        lastUpdate: Date.now()
    },

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏
    config: {
        // –õ—ñ—Å–æ—Ä—É–±–∏
        woodcutter: {
            baseCost: 100,
            costMultiplier: 1.5,
            maxCount: 10,
            baseProduction: 1
        },
        // –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –≤—É–≥—ñ–ª–ª—è
        production: {
            methods: {
                1: { woodNeeded: 8, name: "–ö—É—Å—Ç–∞—Ä–Ω–∏–π", cost: 0 },
                2: { woodNeeded: 7, name: "–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π", cost: 5000 },
                3: { woodNeeded: 6, name: "–ü—Ä–æ–º–∏—Å–ª–æ–≤–∏–π", cost: 25000 }
            }
        },
        // –¶—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É
        sellPrices: {
            wood: 10,
            coalDust: 50,
            coal: 150,
            goldenCoal: 300
        },
        // –î–æ—Å–≤—ñ–¥
        experience: {
            baseNeeded: 1000,
            multiplier: 1.5
        }
    },

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏
    init() {
        this.loadGame();
        this.startGameLoop();
        this.updateUI();
    },

    // –Ü–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª
    startGameLoop() {
        setInterval(() => {
            const now = Date.now();
            const delta = (now - this.state.lastUpdate) / 1000;

            // –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –¥–µ—Ä–µ–≤–∏–Ω–∏
            if (this.state.woodcutters > 0) {
                const production = this.state.woodcutters * this.config.woodcutter.baseProduction;
                this.state.wood += production * delta;
            }

            this.state.lastUpdate = now;
            this.updateUI();
            this.saveGame();
        }, 1000);
    },

    // –ù–∞–π–º –ª—ñ—Å–æ—Ä—É–±–∞
    hireWoodcutter() {
        const cost = this.calculateWoodcutterCost();
        if (this.state.money >= cost && this.state.woodcutters < this.config.woodcutter.maxCount) {
            this.state.money -= cost;
            this.state.woodcutters++;
            this.addExperience(50);
            this.showMessage("–ù–∞–π–Ω—è—Ç–æ –Ω–æ–≤–æ–≥–æ –ª—ñ—Å–æ—Ä—É–±–∞!");
            this.updateUI();
        } else {
            this.showMessage(
                this.state.woodcutters >= this.config.woodcutter.maxCount ? 
                "–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –ª—ñ—Å–æ—Ä—É–±—ñ–≤!" : 
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π!"
            );
        }
    },

    // –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –≤—É–≥—ñ–ª–ª—è
    produceCoal(method) {
        const methodConfig = this.config.production.methods[method];
        if (this.state.wood >= methodConfig.woodNeeded) {
            this.state.wood -= methodConfig.woodNeeded;
            
            setTimeout(() => {
                // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                const roll = Math.random() * 100;
                if (roll < 20) {
                    this.state.coalDust++;
                    this.showMessage("–û—Ç—Ä–∏–º–∞–Ω–æ –≤—É–≥—ñ–ª—å–Ω–∏–π –ø–∏–ª!");
                } else if (roll < 95) {
                    this.state.coal++;
                    this.showMessage("–û—Ç—Ä–∏–º–∞–Ω–æ –¥–µ—Ä–µ–≤–Ω–µ –≤—É–≥—ñ–ª–ª—è!");
                } else {
                    this.state.goldenCoal++;
                    this.showMessage("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–ª–æ—Ç–µ –≤—É–≥—ñ–ª–ª—è!");
                }
                this.addExperience(100);
                this.updateUI();
            }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ

            this.updateUI();
        } else {
            this.showMessage(`–ü–æ—Ç—Ä—ñ–±–Ω–æ ${methodConfig.woodNeeded} –¥–µ—Ä–µ–≤–∏–Ω–∏!`);
        }
    },

    // –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–∞–∂—É
    sellWood() {
        if (this.state.wood >= 1) {
            const amount = Math.floor(this.state.wood);
            this.state.wood -= amount;
            this.state.money += amount * this.config.sellPrices.wood;
            this.addExperience(amount);
            this.showMessage(`+${amount * this.config.sellPrices.wood}üí∞`);
            this.updateUI();
        }
    },

    sellCoalDust() {
        if (this.state.coalDust >= 1) {
            this.state.coalDust--;
            this.state.money += this.config.sellPrices.coalDust;
            this.addExperience(5);
            this.showMessage(`+${this.config.sellPrices.coalDust}üí∞`);
            this.updateUI();
        }
    },

    sellCoal() {
        if (this.state.coal >= 1) {
            this.state.coal--;
            this.state.money += this.config.sellPrices.coal;
            this.addExperience(15);
            this.showMessage(`+${this.config.sellPrices.coal}üí∞`);
            this.updateUI();
        }
    },

    sellGoldenCoal() {
        if (this.state.goldenCoal >= 1) {
            this.state.goldenCoal--;
            this.state.money += this.config.sellPrices.goldenCoal;
            this.addExperience(30);
            this.showMessage(`+${this.config.sellPrices.goldenCoal}üí∞`);
            this.updateUI();
        }
    },

    // –£ Game –æ–±'—î–∫—Ç –¥–æ–¥–∞–π—Ç–µ:
prices: {
    wood: 10,
    coalDust: 50,
    coal: 150,
    goldenCoal: 300
},

sellResource(type) {
    if (this.state[type] >= 1) {
        this.state[type]--;
        const price = this.prices[type];
        this.state.money += price;
        
        // –î–æ–¥–∞—î–º–æ –¥–æ—Å–≤—ñ–¥ –∑–∞ –ø—Ä–æ–¥–∞–∂
        const expGain = Math.floor(price / 10);  // 1 –¥–æ—Å–≤—ñ–¥ –∑–∞ –∫–æ–∂–Ω—ñ 10 –º–æ–Ω–µ—Ç
        this.addExperience(expGain);
        
        this.showMessage(`+${price}üí∞`);
        this.updateUI();
    } else {
        this.showMessage(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Å—É—Ä—Å—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É!`);
    }
},
    // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å–≤—ñ–¥—É
    addExperience(amount) {
        this.state.experience += amount;
        const neededExp = this.calculateNeededExperience();
        
        if (this.state.experience >= neededExp) {
            this.state.level++;
            this.state.experience -= neededExp;
            this.showMessage(`–î–æ—Å—è–≥–Ω—É—Ç–æ —Ä—ñ–≤–µ–Ω—å ${this.state.level}!`);
        }
    },

    calculateNeededExperience() {
        return Math.floor(
            this.config.experience.baseNeeded * 
            Math.pow(this.config.experience.multiplier, this.state.level - 1)
        );
    },

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    calculateWoodcutterCost() {
        return Math.floor(
            this.config.woodcutter.baseCost * 
            Math.pow(this.config.woodcutter.costMultiplier, this.state.woodcutters)
        );
    },

    showMessage(text) {
        const message = document.createElement('div');
        message.className = 'game-message';
        message.textContent = text;
        message.style.position = 'fixed';
        message.style.bottom = '20px';
        message.style.left = '50%';
        message.style.transform = 'translateX(-50%)';
        message.style.background = 'rgba(0,0,0,0.8)';
        message.style.color = 'white';
        message.style.padding = '10px 20px';
        message.style.borderRadius = '20px';
        message.style.zIndex = '1000';
        
        document.body.appendChild(message);
        setTimeout(() => message.remove(), 3000);
    },

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    updateUI() {
        // –†–µ—Å—É—Ä—Å–∏
        document.getElementById('money').textContent = Math.floor(this.state.money);
        document.getElementById('wood').textContent = Math.floor(this.state.wood);
        document.getElementById('coalDust').textContent = Math.floor(this.state.coalDust);
        document.getElementById('coal').textContent = Math.floor(this.state.coal);
        document.getElementById('goldenCoal').textContent = Math.floor(this.state.goldenCoal);
        
        // –õ—ñ—Å–æ—Ä—É–±–∏
        document.getElementById('woodcuttersCount').textContent = this.state.woodcutters;
        document.getElementById('woodcutterCost').textContent = this.calculateWoodcutterCost();
        
        // –î–æ—Å–≤—ñ–¥
        document.getElementById('level').textContent = this.state.level;
        document.getElementById('experience').textContent = Math.floor(this.state.experience);
        document.getElementById('expNeeded').textContent = this.calculateNeededExperience();

        // –ö–Ω–æ–ø–∫–∏ –º–µ—Ç–æ–¥—ñ–≤
        document.getElementById('method2').disabled = this.state.money < 5000;
        document.getElementById('method3').disabled = this.state.money < 25000;
    },

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    saveGame() {
        localStorage.setItem('charcoalGame', JSON.stringify(this.state));
    },

    loadGame() {
        const saved = localStorage.getItem('charcoalGame');
        if (saved) {
            this.state = JSON.parse(saved);
        }
    }
};

// –ó–∞–ø—É—Å–∫ –≥—Ä–∏
window.onload = () => Game.init();
